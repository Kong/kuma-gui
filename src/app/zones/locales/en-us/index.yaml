zone-cps:
  routes:
    item:
      title: "{name} Zone Control Plane"
      breadcrumbs: Zone Control Planes
      config:
        no-subscriptions: This zone has no subscriptions
    items:
      title: Zone Control Planes
      breadcrumbs: Zone Control Planes
  list:
    version_mismatch: 'Version mismatch'

zone-ingresses:
  routes:
    item:
      title: "{name} Zone Ingress"
      breadcrumbs: Ingresses
    items:
      title: Ingresses
      breadcrumbs: Ingresses

zone-egresses:
  routes:
    item:
      title: "{name} Zone Egress"
      breadcrumbs: Egresses
    items:
      title: Egresses
      breadcrumbs: Egresses

zones:
  href:
    docs:
      cta: '{KUMA_DOCS_URL}/documentation/deployments?{KUMA_UTM_QUERY_PARAMS}'
  routes:
    create:
      title: 'Create & connect Zone'
    items:
      title: Zones
      navigation:
        zone-cp-list-view: Zone Control Planes
        zone-ingress-list-view: Ingresses
        zone-egress-list-view: Egresses
  index:
    create: 'Create Zone'
  form:
    exit: 'Exit'
    nameLabel: 'Name'
    createZoneButtonLabel: 'Create Zone & generate token'
    environmentLabel: 'Environment'
    universalLabel: 'Universal'
    kubernetesLabel: 'Kubernetes'
    zoneIngressLabel: 'Zone Ingress'
    zoneIngressEnabledLabel: 'Enabled'
    zoneEgressLabel: 'Zone Egress'
    zoneEgressEnabledLabel: 'Enabled'
    connectZone: 'Connect Zone'
    scan:
      waitTitle: 'Waiting for Zone to be connected …'
      completeTitle: 'Done!'
      completeDescription: 'The Zone “{name}” is now connected.'
      completeButtonLabel: 'Go to Zone “{name}”'
      errorTitle: 'Could not connect Zone'
      errorDescription: 'We were unable to connect Zone.'
    universal:
      saveToken:
        title: 'Save token'
        saveTokenDescription: 'Save the token to a file.'
        saveTokenCommand: |
          mkdir -p ~/kuma-cp \
            && echo {token} > ~/kuma-cp/cpTokenFile \
            && chmod 600 ~/kuma-cp/cpTokenFile
      connectZone:
        title: 'Connect Zone'
        configDescription: 'Copy and paste the following configuration into the config.yaml on your local machine.'
        configFileName: 'config.yaml'
        config: |
          environment: universal
          mode: zone
          multizone:
            zone:
              name: "{zoneName}"
              globalAddress: {globalKdsAddress}
          experimental:
            kdsDeltaEnabled: true
        connectDescription: 'Next, download Kuma and connect the Zone'
        connectCommand: |
          curl -L https://kuma.io/installer.sh | VERSION=0.0.0-preview.vabf3cdb72 sh - \
            && kuma-0.0.0-preview.vabf3cdb72/bin/kuma-cp run -c config.yaml
    kubernetes:
      prerequisites:
        title: 'Prerequisites'
        step1Label: 'Kubernetes cluster'
        step1LabelAddendum: 'with load balancer'
        step1Description: '{productName} is compatible with all distributions of Kubernetes, including Minikube, AKS, EKS, GKE and OpenShift.'
        step2Label: 'kubectl or oc access'
        step2Description: 'You have kubectl or oc (if working with OpenShift) installed and configured to communicate to your Kubernetes cluster.'
        step3LinkTitle: 'Helm 3'
        step3Tail: 'is installed.'
      helm:
        title: 'Set-up Helm'
        description: 'On your local machine, create a namespace in your Kubernetes cluster and pull down the Helm repo.'
        step1Description: 'Create a namespace'
        step1Command: 'kubectl create namespace kuma-system'
        step2Description: 'Add the charts repository'
        step2Command: 'helm repo add kuma https://kumahq.github.io/charts'
        step3Description: 'Update Helm'
        step3Command: 'helm repo update'
      secret:
        title: 'Set-up secret'
        createSecretDescription: 'Add the token as a Kubernetes secret.'
        createSecretCommand: |
          echo "
            apiVersion: v1
            kind: Secret
            metadata:
              name: cp-token
              namespace: kuma-system
            type: Opaque
            data:
              token: {token}
          " | kubectl apply -f -
      connectZone:
        title: 'Connect Zone'
        configDescription: 'Copy and paste the following configuration into the Helm chart values.yaml on your local machine.'
        configFileName: 'values.yaml'
        config: |
          controlPlane:
            mode: zone
            zone: "{zoneName}"
            kdsGlobalAddress: {globalKdsAddress}
            secrets:
              - Env: KUMA_MULTIZONE_ZONE_KDS_AUTH_CP_TOKEN_INLINE
                Secret: cp-token
                Key: token
          ingress:
            enabled: {zoneIngressEnabled}
          egress:
            enabled: {zoneEgressEnabled}
          experimental:
            deltaKds: true
        connectDescription: 'Next, run the following command to connect the Zone.'
        connectCommand: 'helm install -n kuma-system -f values.yaml kuma kuma/kuma'
  create:
    generalError:
      title: 'Could not create the Zone'
    statusError:
      400:
        title: 'The Zone name {zoneName} is invalid'
        description: 'Zone names may contain alphanumerical characters, dashes (-), and underscores (_).'
      409:
        title: 'A Zone with the name {zoneName} already exists'
        description: 'If you want to connect a Zone with this name, you can delete the existing one and create a new one.'
      500:
        title: 'An error occurred while creating the Zone {zoneName}'
        description: 'You may retry this operation.'
  delete:
    confirmModal:
      text1: 'Are you sure you want to delete the Zone {zoneName}?'
      text2: 'This action cannot be reversed.'
      proceedText: 'Yes, delete'
      title: 'Delete Zone'
      errorText: 'An unexpected error occurred'
